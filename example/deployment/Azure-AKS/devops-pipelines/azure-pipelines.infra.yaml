variables:
- template: ./azure-pipelines.defaults.yaml

trigger:
  batch: true
  paths:
    include:
    - example/deployment/Azure-AKS/terraform/*
    - example/deployment/Azure-AKS/devops-pipelines/azure-pipelines.infra.yaml

stages:
- stage: Deploy_Infra
  jobs:
  - job:
    variables:
    - group: ${{variables.groupName}}
    steps:
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(azure-dir)/terraform'
        backendType: azurerm
        backendServiceArm: ${{variables.devOpsServiceConnection}}
        ensureBackend: true
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmResourceGroupLocation: uksouth
        backendAzureRmStorageAccountName: 'tfstatepalisade'
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: palisade

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(azure-dir)/terraform'
        environmentServiceName: ${{variables.devOpsServiceConnection}}
        commandOptions: '-var-file default.tfvars -var client_id=$(terraform_sp_app_id) -var client_secret=$(terraform_sp_pass) -var subscription_id=$(subscription_id)  -out plan'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(azure-dir)/terraform'
        environmentServiceName: ${{variables.devOpsServiceConnection}}
        commandOptions: plan

    - task: HelmInstaller@0
      displayName: 'Install Helm'
      inputs:
        helmVersion: 2.13.0
        kubectlVersion: 1.14.0

    - task: Kubernetes@1
      displayName: 'K8s RBAC Accounts'
      inputs:
        connectionType: Azure Resource Manager
        azureSubscriptionEndpoint: ${{variables.devOpsServiceConnection}}
        azureResourceGroup: 'palisade'
        kubernetesCluster: 'palisade-aks'
        command: apply
        useConfigurationFile: true
        configuration: '$(System.DefaultWorkingDirectory)/$(azure-dir)/k8s/'
        checkLatest: true

    - task: AzureCLI@1
      displayName: 'Create share secret within k8'
      inputs:
        azureSubscription: ${{variables.devOpsServiceConnection}}
        scriptPath: '$(System.DefaultWorkingDirectory)/$(azure-dir)/k8s/create_share_secret.sh'
        arguments: "palisade $(data_storage_account_name) palisade-aks palisade-storage"

    - task: HelmDeploy@0
      displayName: 'helm init'
      inputs:
        azureSubscription: ${{variables.devOpsServiceConnection}}
        azureResourceGroup: 'palisade'
        kubernetesCluster: 'palisade-aks'
        command: init
        arguments: ' --upgrade --service-account tiller'

    - task: AzureCLI@1
      displayName: 'get-ingress-ip'
      inputs:
        azureSubscription: ${{variables.devOpsServiceConnection}}
        scriptLocation: inlineScript
        inlineScript: |
          ingress_ip=$(az network public-ip show -n "palisade-ingress-ip" -g "palisade" --query \"ipAddress\" | sed 's/\"//g')
          echo "##vso[task.setvariable variable=ingressIpAddress]${ingress_ip}"

    - task: AzureCLI@1
      displayName: 'helm repo update'
      inputs:
        azureSubscription: ${{variables.devOpsServiceConnection}}
        scriptLocation: inlineScript
        inlineScript: |
          helm repo update

    - task: HelmDeploy@0
      displayName: 'helm upgrade nginx-ingress'
      inputs:
        azureSubscription: ${{variables.devOpsServiceConnection}}
        azureResourceGroup: 'palisade'
        kubernetesCluster: 'palisade-aks'
        namespace: ingress
        command: upgrade
        chartName: 'stable/nginx-ingress'
        releaseName: 'nginx-ingress'
        overrideValues: 'controller.replicaCount=3,controller.service.loadBalancerIP=$(ingressIpAddress),controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=palisade'
        force: true
        timeoutInMinutes: 600
