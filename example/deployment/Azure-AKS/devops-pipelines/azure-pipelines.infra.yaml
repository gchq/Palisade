variables:
  azure-dir: example/deployment/Azure-AKS
  devops-dir: $(azure-dir)/devops-pipelines

trigger:
  batch: true
  branches:
    include:
      - '*'
  paths:
    include:
      - example/deployment/Azure-AKS/terraform/*
      - example/deployment/Azure-AKS/devops-pipelines/azure-pipelines.infra.yaml

stages:
  - stage: Deploy_Infra
    jobs:
      - job:
        variables:
          - group: Palisade-azure
        steps:
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'terraform init'
            inputs:
              command: init
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(azure-dir)/terraform'
              backendType: azurerm
              backendServiceArm: 'palisade_rm'
              ensureBackend: true
              backendAzureRmResourceGroupName: 'tmp-tfstate'
              backendAzureRmResourceGroupLocation: uksouth
              backendAzureRmStorageAccountName: 'tfstatepalisade'
              backendAzureRmContainerName: tfstate
              backendAzureRmKey: palisade

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'terraform plan'
            inputs:
              command: plan
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(azure-dir)/terraform'
              environmentServiceName: 'palisade_rm'
              commandOptions: '-var-file default.tfvars -var client_id=$(terraform_sp_app_id) -var client_secret=$(terraform_sp_pass) -var subscription_id=$(subscription_id)  -out plan'

          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'terraform apply'
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(azure-dir)/terraform'
              environmentServiceName: 'palisade_rm'
              commandOptions: plan

          - task: HelmInstaller@0
            displayName: 'Install Helm'
            inputs:
              helmVersion: 2.13.0
              kubectlVersion: 1.14.0

          - task: AzureCLI@1
            displayName: 'get-ingress-ip'
            inputs:
              azureSubscription: 'palisade_rm'
              scriptLocation: inlineScript
              inlineScript: |
                ingress_ip=$(az network public-ip show -n "palisade-ingress-ip" -g "tmp-palisade-ips" --query \"ipAddress\" | sed 's/\"//g')
                echo "##vso[task.setvariable variable=ingressIpAddress]${ingress_ip}"

          - task: Kubernetes@1
            displayName: 'K8s RBAC Accounts'
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: 'palisade_rm'
              azureResourceGroup: 'tmp-palisade-aks'
              kubernetesCluster: 'palisade-aks'
              command: apply
              useConfigurationFile: true
              configuration: '$(System.DefaultWorkingDirectory)/$(azure-dir)/k8s/'
              checkLatest: true

          - task: AzureCLI@1
            displayName: 'Create share secret within k8'
            inputs:
              azureSubscription: 'palisade_rm'
              scriptPath: '$(System.DefaultWorkingDirectory)/$(azure-dir)/k8s/create_share_secret.sh'
              arguments: "tmp-palisade-aks $(data_storage_account_name) palisade-aks tmp-palisade-storage"

          - task: HelmDeploy@0
            displayName: 'helm init'
            inputs:
              azureSubscription: 'palisade_rm'
              azureResourceGroup: 'tmp-palisade-aks'
              kubernetesCluster: 'palisade-aks'
              command: init
              arguments: ' --upgrade --service-account tiller'

          - task: HelmDeploy@0
            displayName: 'helm upgrade nginx-ingress'
            inputs:
              azureSubscription: 'palisade_rm'
              azureResourceGroup: 'tmp-palisade-aks'
              kubernetesCluster: 'palisade-aks'
              namespace: ingress
              command: upgrade
              chartName: 'stable/nginx-ingress'
              releaseName: 'nginx-ingress'
              overrideValues: 'controller.replicaCount=3,controller.service.loadBalancerIP=$(ingressIpAddress),controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"=tmp-palisade-ips'
